/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.stlpriory.robotics.misc;

import edu.wpi.first.wpilibj.CANJaguar;

/**
 *
 */
public class Constants {

    // Threshold below which joystick inputs will be ignored
    public static final double JOYSTICK_THRESHOLD = 0.2;

    /**
     * The servo angle, in degrees, used to load frisbee discs.
     *
     * Assume that the servo angle is linear with respect to the PWM value (big assumption, need to test).
     *
     * Servo angles that are out of the supported range of the servo simply "saturate" in that direction
     * In other words, if the servo has a range of (X degrees to Y degrees) than angles of less than X
     * result in an angle of X being set and angles of more than Y degrees result in an angle of Y being set.
     */

    //-----------------------------------------------------------------------
    //     Constants for the Shooter subsystem
    //-----------------------------------------------------------------------
    public static final double MIN_LOADER_SERVO_ANGLE = -45.0;
    public static final double MAX_LOADER_SERVO_ANGLE = 65.0;

    public static final double SHOOTER_WHEEL_MOTOR_SPEED = 0.5;
    public static final double LOADER_MOTOR_SPEED = 0.5;

    //-----------------------------------------------------------------------
    //     Constants for the CANDriveTrain subsystem
    //-----------------------------------------------------------------------

    // Codes per revolution generated by the encoder
    // (US Digital E4P-250-250-N-S-D-D-B encoder)
    public static final int ENCODER_CODES_PER_REV = 250;
    // The number of turns on the potentiometer
    public static final int ENCODER_POTENTIOMETER_TURNS = 0;
    // The maximum voltage that the Jaguar will ever output
    public static final double JAGUAR_MAX_OUTPUT_VOLTAGE = 12;
    // The maximum voltage change rate
    public static final double JAGUAR_VOLTAGE_RAMP_RATE = 20;

    // The proportional gain of the Jaguar's PID controller.
    public static final double KP = 0.5;
    // The integral gain of the Jaguar's PID controller.
    public static final double KI = 0; //0.005;
    // The differential gain of the Jaguar's PID controller.
    public static final double KD = 0; //0.25;

    // The Jaguar configuration properties
    // http://www.chiefdelphi.com/forums/showthread.php?t=105641
    // http://team2168.org/index.php/resources/electrical/210-can-jaguars
    public static final CANJaguar.NeutralMode JAGUAR_NEUTRAL_MODE = CANJaguar.NeutralMode.kJumper;
    public static final CANJaguar.ControlMode JAGUAR_CONTROL_MODE = CANJaguar.ControlMode.kPercentVbus;
    public static final CANJaguar.SpeedReference JAGUAR_SPEED_REFERNCE = CANJaguar.SpeedReference.kQuadEncoder;

}
